Deadlock detection and recovery. Allows deadlocks to form; then finds and breaks them. Used when available data about "all" running processes. It can be used in two cases. The first one is when we save the checkpoints and we can roll back to them. And the second, we can kill the process and restore it later, but this is not always possible, because it can cause failures.

Deadlock avoidance. Dynamically grants a resource to a process if the resulting state is safe. A state is safe if there is at least one execution sequence that allows all processes to run to completion. Requests, unlike prevention, come gradually. There is a banker's method, but it is not used in practice due to lack of data.

Deadlock prevention. Prevents deadlocks by restraining requests made to ensure that at least one of the four deadlock conditions cannot occur. Some batch systems on general-purpose machines require users to list all resources on the first line of each job. The system then immediately preallocates all resources and holds them until the job does not need them (or in the simplest case, until the job is finished). Although this method burdens the programmer and wastes resources, it prevents interlocks from occurring.
